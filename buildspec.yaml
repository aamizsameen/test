version: 0.2
phases:
  pre_build:
      commands:
      
        - echo "hello"
        - aws --version

        - BUILD_IMAGE_NAME=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."BUILD_IMAGE_NAME")
        - REPO_URL=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."REPO_URL")
        - REPO_LOGIN=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."REPO_LOGIN") 
        - DEPLOYMENT_NAME=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."DEPLOYMENT_NAME")
        - REGION=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."REGION")
        - NAMESPACE=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."NAMESPACE")
        - CONTAINER_NAME=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."CONTAINER_NAME")
        - FROM_EMAIL=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."FROM_EMAIL")
        - TO_EMAIL=$(aws secretsmanager get-secret-value --secret-id  ${SECRETS} | jq --raw-output .SecretString | jq -r ."TO_EMAIL")

  build:
      commands:
        # Build Docker Image
        - echo "Building the Docker image..."
        - docker build -t ${BUILD_IMAGE_NAME}:latest .

  post_build:
      commands:
        # Push Docker Image to ECR Repository
        - echo "Pushing the Docker image to ECR Repository"
        - aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${REPO_LOGIN}
        - docker tag ${BUILD_IMAGE_NAME}:latest ${REPO_URL}:latest
        - docker push ${REPO_URL}:latest

        # Setup kubectl with our EKS Cluster              
        - echo "Update Kube Config" 
        - export AWS_ACCESS_KEY_ID="ASIAUTWN4ORTPVY23PRU"
        - export AWS_SECRET_ACCESS_KEY="KmYx6kvbfLxU35dIgK4DQ1YcaoJurXbl0lC+aUme"
        - export AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjEPn//////////wEaCXVzLWVhc3QtMSJGMEQCIBQgmANIC8qyKcjtKgfsRx+VDZ1LRfGXhheCU5ZxXCgzAiBOr5bEggU4ZcsG1Zz95VIxY/qNMiaAUo4B8pHPa4+4RCqFAwgSEAEaDDMxNzE4NTYxOTA0NiIMA7axpcA3qah6ly94KuIC68xsyDDcZEuL5RaxGVzmRnXz2vHuoeo0UYHA9zXNf23ZMXaqfivQTxis4NCIxSNAQg0llQg6elz1pLr4A/9b5plBrry8pL4EtFGXk/2jTvYkD4Nnsuf7we6Y3WgkTdfmNdVDhgCTT0IfpeR7zVLVnz/K3rMsV0TW5xaHK8BUw36e1m2r4MOFbcOUlQfsDicts9T1d2sOZUcLmXWpn5P2cAgKgmc3b6N/v0Xxf6FSX1GtvHlRdQhHeVnZ2fbRfryXIMW+OWzCdRhU1pHHqBBSrIKYxWlCCXa8yEk0ngzyHBijgFBSqEefF56EGrGNvrzlTkK9CMbJyBhhgBoVxkOdYNfygNBp0p+uIG1sAvgX1QmNMiLjhg5BwDDXS69JtEqlYKtIw/gQNGmcyM3r67GwTq2En5X3Om0yNv9p5GwfcHJMqYLK1EAvgmwr3ZvrnMt/ke+/hqeIX0eCP1+Hw5GK5ggCMLbG6q8GOqcB+oOA93kg6MWDoJbrlBWXXWroDObgLZ3czTiIFT9e81d3fZpu/Z9iIxBEvZPkLHm9FqWmACVKfB40YylqAwjzcdArezkJXoenkwE5lAE80ZLgLfulDbtcJfnwyOi3Je/cOrcTMLZx4/LEkjsxdXDLR8mTGWDg9Kz0O3wijKJiI/bzgO60/2ULK48AGWO2/xokuYJd42eNT7y3ZDQ2ad3T+QHL3bKfX94="
        - aws eks update-kubeconfig --name POC-amz
        - kubectl get po
        - TAG_ID = kubectl get deployment \${DEPLOYMENT_NAME} -n \${NAMESPACE} -o=jsonpath='{.spec.template.spec.containers[0].image}' | awk -F':' '{printf "%.1f", \$2 + 0.1}'
        - echo $TAG_ID

        # Apply changes to our Application using kubectl
        - echo "Apply changes to kube manifests"            
        - kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${REPO_URL}:latest -n ${NAMESPACE}
        - kubectl rollout restart deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE}
        - echo "Completed applying changes to Kubernetes Objects"  

